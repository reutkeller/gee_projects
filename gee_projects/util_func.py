# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/utilities/utilities.ipynb.

# %% auto 0
__all__ = ['read_gdf', 'gdf_to_featureCollection', 'extract_dates_from_img_coll', 'find_closest_date']

# %% ../nbs/utilities/utilities.ipynb 3
import geopandas as gpd
import seaborn as sns
from shapely.geometry import Point
import json
import ee
from datetime import datetime

ee.Authenticate()
ee.Initialize(project='ee-reutkeller')

from . import const_vars as const

# %% ../nbs/utilities/utilities.ipynb 5
def read_gdf(geometry_path : str , #path to geometry file (.shp /.gpkg). Path string should be written with r, for example r"path/to/geom/geom.gpkg"
                  crs : str , #crs code , for example '4326'. the coordinate reference system code to be used
                  ):
  
  gdf = gpd.read_file(geometry_path)
  gdf = gdf.set_crs(crs)

  return gdf

# %% ../nbs/utilities/utilities.ipynb 8
def gdf_to_featureCollection(
  gdf : gpd.GeoDataFrame , # geopandas geodataframe data
  ):
  ''' convert geodataframe to ee FeatureCollection type, based on this post https://gis.stackexchange.com/questions/439924/convert-local-file-shp-csv-into-earth-engine-ee-object'''
  
  # convert to json
  geo_json = gdf.to_json()

  #convert to FeatureCollection
  featureCollection = ee.FeatureCollection(json.loads(geo_json))


  return featureCollection
  

# %% ../nbs/utilities/utilities.ipynb 11
def extract_dates_from_img_coll(img):
    '''This function extract list of dates of images in imageCollection'''
    date = ee.Date(img.get(const.system_time_start_str)).format(const.date_format_1)
    return ee.Feature(None, {'date': date})

# %% ../nbs/utilities/utilities.ipynb 12
def find_closest_date(user_date : str , # the date that the user wants to get image for
                      date_list : list , #list of available dates in imageCollection
                      ):
    '''
The function identifies the nearest date in the image collection based on the provided reference date'''

    # Convert user-provided date string to datetime object
    user_datetime = datetime.strptime(user_date, const.date_format_2)

    # Convert the list of date strings to datetime objects
    date_objects = [datetime.strptime(date, const.date_format_2) for date in date_list]

    # Find the closest date in the list
    closest_date = min(date_objects, key=lambda date: abs(date - user_datetime))

    # Convert the closest date back to string format
    closest_date_str = closest_date.strftime(const.date_format_2)

    return closest_date_str
