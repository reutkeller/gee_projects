# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/satellite_data/sentinel_2.ipynb.

# %% auto 0
__all__ = ['access_s2_image', 'find_closest_date']

# %% ../nbs/satellite_data/sentinel_2.ipynb 3
import geopandas as gpd
import seaborn as sns
from shapely.geometry import Point
import json
import ee
import geemap
from datetime import datetime

ee.Authenticate()
ee.Initialize(project='ee-reutkeller')

from . import util_func as utils
from . import const_vars as const
from . import mask_s2 as mask_s2

# %% ../nbs/satellite_data/sentinel_2.ipynb 5
class access_s2_image():
  
  def __init__(self,
               path_to_geometry : str , # path to geometry file, can be .shp or .gpkg . example : r"D:\git\gee_maps\nbs\geometry\test_bbox.gpkg"
               crs : str , #coordinate reference system to work with
               start_date : str , # Start date for searching images. , 
               end_date : str , # End date for searching images.
               user_date : str , # The user-provided date of interest; the script accesses the image with the closest available date to the provided date
               ):
    
    self.crs = crs
    self.fc = utils.gdf_to_featureCollection(
      utils.read_gdf(geometry_path=path_to_geometry,crs=self.crs))
    self.start_date=start_date
    self.end_date=end_date
    self.user_date = user_date
    
    
    self.fc = utils.gdf_to_featureCollection(utils.read_gdf
                                        (geometry_path=path_to_geometry,crs=self.crs))
    
    #pre process s2
    s2_sr_cld_col_eval = mask_s2.get_s2_sr_cld_col(self.fc, self.start_date, self.end_date)

    self.s2_sr = (s2_sr_cld_col_eval.map(mask_s2.add_cld_shdw_mask)
             .map(mask_s2.apply_cld_shdw_mask))

    #get list of available dates of the image collection

    available_dates = utils.list_dates(self.s2_sr)
    self.closest_date = utils.find_closest_date(date_list = available_dates,
                                                user_date=self.user_date)

# %% ../nbs/satellite_data/sentinel_2.ipynb 7
def find_closest_date(user_date : str , # the date that the user wants to get image for
                      date_list : list , #list of available dates in imageCollection
                      ):
    '''
The function identifies the nearest date in the image collection based on the provided reference date'''

    # Convert user-provided date string to datetime object
    user_datetime = datetime.strptime(user_date, const.date_format_2)

    # Convert the list of date strings to datetime objects
    date_objects = [datetime.strptime(date, const.date_format_2) for date in date_list]

    # Find the closest date in the list
    closest_date = min(date_objects, key=lambda date: abs(date - user_datetime))

    # Convert the closest date back to string format
    closest_date_str = closest_date.strftime(const.date_format_2)

    return closest_date_str
